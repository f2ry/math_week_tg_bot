import telebot

from json_work import *

db_path = "db/users.json"
tasks_path = "db/tasks.json"
config_path = "db/config.json"
config = db_open(config_path)
TOKEN = config["token"]
day = config["day"]
bot = telebot.TeleBot(token=TOKEN, parse_mode="HTML")


@bot.message_handler(commands=["start"])
def start(message):
    parsed_start = message.text.split(" ", maxsplit=1)
    chat_id = message.chat.id
    db = db_open(db_path)
    if str(chat_id) not in db.keys():
        bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∂–µ—Ç—Å—è, –º—ã —Å —Ç–æ–±–æ–π —Ä–∞–Ω—å—à–µ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å.\n–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?\n<i>–í–≤–µ–¥–∏ —Å–≤–æ–∏ –§–ò</i>:")
        bot.register_next_step_handler(message, registration, db)
        return 0
    else:
        if len(parsed_start) > 1:
            solve(message)
            return 0
        user = db[str(chat_id)]
        bot.send_message(chat_id, f"""
–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}!

<b>–ò–º—è:</b> {user["name"]}
<b>–ö–ª–∞—Å—Å:</b> {user["class"]}
<b>–†–µ—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:</b> {len(user["solved"].keys())} –∏–∑ {day}0

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
/start * - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ, –≥–¥–µ * - –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è. 
/solve * - –¥–µ–ª–∞–µ—Ç —Ç–æ –∂–µ —Å–∞–º–æ–µ, —á—Ç–æ –∏ start *. 
/remove - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–µ–±—è –∏–∑ –±–∞–∑—ã. –ù—É–∂–Ω–∞, –µ—Å–ª–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.
/top - –≤—ã–≤–æ–¥–∏—Ç —Ç–æ–ø-5 –ª—é–¥–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–∞–±—Ä–∞–Ω–Ω—ã—Ö –æ—á–∫–æ–≤.

–ê –≤–æ–æ–±—â–µ, –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–Ω–∏—Ä—É–π QR-–∫–æ–¥ —Å –∑–∞–¥–∞–Ω–∏–µ–º –∏ –¥–∞–≤–∞–π —Ä–µ—à–∞—Ç—å!
üì∑üì∑üì∑
                         """)
    

def registration(message, db):
    chat_id = message.chat.id
    name = message.text
    bot.send_message(chat_id, "–í –∫–∞–∫–æ–º —Ç—ã –∫–ª–∞—Å—Å–µ?\n<i>–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∏ –±—É–∫–≤—É:</i>")
    bot.register_next_step_handler(message, next_step, db, name)

def next_step(message, db, name):
    chat_id = message.chat.id
    class_numero = message.text
    db.update(
        {str(chat_id): {
            "name": name,
            "class": class_numero,
            "score": 0,
        "solved": {
                }
   }})
    db_rewrite(db_path, db)
    bot.send_message(chat_id, "–í–æ—Ç –º—ã –∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å!\n–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–±—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
    print(f"\nnew user: {chat_id}!\nname: {name}\ncurrent users' counter: {len(db.keys())}")
    message.text = "/start"
    start(message)

@bot.message_handler(commands=["remove"])
def remove(message):
    chat_id = message.chat.id
    kb = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–î–∞, —è —É–≤–µ—Ä–µ–Ω", "–ù–µ—Ç, —è –ø–µ—Ä–µ–¥—É–º–∞–ª")
    bot.send_message(chat_id, "–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å?\n‚ö†<i>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.\n–í–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç —É—Ç–µ—Ä—è–Ω!</i>‚ö†", reply_markup=kb)
    bot.register_next_step_handler(message, remove_confirmation, chat_id)

def remove_confirmation(message, chat_id):
    db = db_open(db_path)
    if message.text == "–î–∞, —è —É–≤–µ—Ä–µ–Ω":
        db.pop(str(chat_id))
        db_rewrite(db_path, db)
        bot.send_message(chat_id, "–ü—Ä–∏—è—Ç–Ω–æ –±—ã–ª–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è... –ù–∞–¥–µ—é—Å—å, –º—ã –µ—â–µ —É–≤–∏–¥–∏–º—Å—è!", reply_markup=telebot.types.ReplyKeyboardRemove())
        return 0
    if message.text == "–ù–µ—Ç, —è –ø–µ—Ä–µ–¥—É–º–∞–ª":
        bot.send_message(chat_id, "–•–æ—Ä–æ—à–æ, —á—Ç–æ —Ç—ã —Ä–µ—à–∏–ª –æ—Å—Ç–∞—Ç—å—Å—è...\n–¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É—é —Ç–µ–±—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!", reply_markup=telebot.types.ReplyKeyboardRemove())
        message.text = "/start"
        start(message)
    else:
        bot.send_message(chat_id, "–ù–µ –ø–æ–Ω—è–ª, —á—Ç–æ —Ç—ã –∏–º–µ–µ—à—å –≤–≤–∏–¥—É...\n–°–¥–µ–ª–∞–µ–º –≤–∏–¥, —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –±—ã–ª–æ!", reply_markup=telebot.types.ReplyKeyboardRemove())
        message.text = "/start"
        start(message)

@bot.message_handler(commands=["solve"])
def solve(message):
    global day
    tasks = db_open(tasks_path)
    chat_id = message.chat.id
    parsed = message.text.split(" ", maxsplit=1)
    if len(parsed) == 1:
        bot.send_message(chat_id, "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")
        message.text = "/start"
        start(message)
        return 0

    task_id = parsed[1]
    user = db_open(db_path)[str(chat_id)]
    if task_id in tasks.keys():
        if task_id in user["solved"].keys():
            bot.send_message(chat_id, "–í—ã —É–∂–µ —Ä–µ—à–∞–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ!")
            message.text = "/start"
            start(message)
            return 0
        if int(task_id) not in range(int(str(day-1)+"1"), int(str(day)+"1")):
            bot.send_message(chat_id, "–ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º...")
            message.text = "/start"
            start(message)
            return 0
        kb = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add("–Ø –ø–æ–∫–∞ –Ω–µ —Ö–æ—á—É —ç—Ç–æ —Ä–µ—à–∞—Ç—å...")
        bot.send_photo(chat_id, telebot.types.InputFile(f"db/tasks/pics/day_{day}/{task_id}.png"), caption='''
<i>–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∏–∂–µ.</i>
                       
<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–æ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏ –Ω–µ —Ç–æ—Ä–æ–ø–∏—Ç–µ—Å—å!</b>
–ü—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤:
- –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ –¥—Ä–æ–±–∏: 1,23 (–≤–≤–æ–¥—è—Ç—Å—è —Å –∑–∞–ø—è—Ç–æ–π)
- –≤—ã—Ä–∞–∂–µ–Ω–∏—è: 2+2=4 (–≤–≤–æ–¥—è—Ç—Å—è –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)
- —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞: -5 
<b>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Ä–µ—à–µ–Ω–∏—è.</b>''',
                       reply_markup=kb)
        bot.register_next_step_handler(message, answer_validation, chat_id, user, tasks, task_id)
    else:
        bot.send_message(chat_id, "–ó–∞–¥–∞–Ω–∏—è –≤ –±–∞–∑–µ –Ω–µ—Ç.")

def answer_validation(message, chat_id, user, tasks, task_id):
    answer = message.text
    if answer == "–Ø –ø–æ–∫–∞ –Ω–µ —Ö–æ—á—É —ç—Ç–æ —Ä–µ—à–∞—Ç—å...":
        bot.send_message(chat_id, "–ö–∞–∫ —Å–∫–∞–∂–µ—à—å! –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É—é —Ç–µ–±—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", reply_markup=telebot.types.ReplyKeyboardRemove())
        message.text = "/start"
        start(message)
        return 0 
    if answer.lower() == tasks[task_id].lower():
        user["score"] = int(user["score"]) + 1
    user["solved"].update({task_id: answer})
    db = db_open(db_path)
    db[str(chat_id)].update(user)
    db_rewrite(db_path, db)
    bot.send_message(chat_id, "<i>–í–∞—à –æ—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω. –ù–∞–¥–µ—é—Å—å, –æ–Ω –Ω–µ –±—ã–ª —Å–ª—É—á–∞–π–Ω—ã–º...</i>", reply_markup=telebot.types.ReplyKeyboardRemove())
    message.text = "/start"
    start(message)

@bot.message_handler(commands=["day"])
def day_change(message):
    global day
    chat_id = message.chat.id
    if str(chat_id) not in config["admins"]:
        bot.send_message(chat_id, "is not accessed")
        return 0
    text = message.text.split(" ", maxsplit=1)
    if len(text) == 2:
        new_day = text[1]
        bot.send_message(chat_id, f"–ë—ã–ª –¥–µ–Ω—å: {day}\n–ù–æ–≤—ã–π –¥–µ–Ω—å: {new_day}")
        day = int(new_day)
        config.update({"day": day})
        db_rewrite(config_path, config)
        return 0
    else:
        bot.send_message(chat_id, f"–°–µ–π—á–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–µ–Ω—å: {day}")
        return 0
    
@bot.message_handler(commands=["top"])
def top(message):
    chat_id = message.chat.id
    db = db_open(db_path)
    users_score = {}
    for user in db:
        users_score.update({user: int(db[user]["score"])})
    sorted_score = dict(sorted(users_score.items(), key=lambda item: item[1], reverse=True))
    result = ''
    right_range = len(sorted_score.keys()) if len(sorted_score.keys()) < 5 else 5
    for user in list(sorted_score.keys())[0:right_range]:
        result += f'''
UID: {user}
–ò–º—è: {db[user]["name"]}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤: {sorted_score[user]}
'''
    bot.send_message(chat_id, result)
    
print("succ3ss")
bot.infinity_polling()

